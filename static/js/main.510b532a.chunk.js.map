{"version":3,"sources":["components/card.js","App.js","serviceWorker.js","index.js"],"names":["Cardmsg","props","className","Card","body","CardTitle","name","CardText","reqNumber","App","search","keyword","console","log","dataArray","firebase","database","ref","on","snapshot","jobData","val","i","Object","keys","push","values","result","filter","row","includes","setState","rows","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","state","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","id","onChange","event","target","value","this","map","item","key","jobName","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uVAgBeA,EAZC,SAACC,GACf,OACE,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,qBAAqBE,MAAI,GACvC,kBAACC,EAAA,EAAD,KAAYJ,EAAMK,MAClB,kBAACC,EAAA,EAAD,KAAWN,EAAMO,c,iBCsEVC,E,kDAvEb,WAAYR,GAAO,IAAD,uBACE,cAAMA,IAiC1BS,OAAS,SAACC,GACYC,QAAQC,IAAIF,GACZ,IAAIG,EAAY,GACNC,IAASC,WAAWC,IAAI,OAC9BC,GAAG,SAAS,SAAAC,GAGd,IAFA,IAAIC,EAAUD,EAASE,MACnBC,EAAI,EACFC,OAAOC,KAAKJ,GAASE,IAEzBR,EAAUW,KAAKF,OAAOG,OAAON,GAASE,IACtCA,OAIJ,IACMK,EADMb,EACOc,QAAO,SAAAC,GAAG,OAAIA,EAAIrB,UAAUsB,SAASnB,MACxDC,QAAQC,IAAIc,GACZ,EAAKI,SAAS,CAACC,KAAKL,KAnDxB,OAaSZ,IAASkB,KAAKC,QACjBnB,IAASoB,cAZA,CACGC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAM/B,EAAKC,MAAQ,CAACZ,KAAK,IAhBrB,E,gEAoBE,IAAD,OACOlB,EAAY,GACRC,IAASC,WAAWC,IAAI,OAC9BC,GAAG,SAAS,SAAAC,GAGc,IAFA,IAAIC,EAAUD,EAASE,MACnBC,EAAI,EACFC,OAAOC,KAAKJ,GAASE,IAEzBR,EAAUW,KAAKF,OAAOG,OAAON,GAASE,IACtCA,IAEF,EAAKS,SAAS,CAACC,KAAKlB,S,+BAsB5D,IAAD,OACC,OACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,aAAa,4CAE9B,yBAAKA,UAAU,QACf,kBAAC2C,EAAA,EAAD,CAAY3C,UAAU,QACpB,kBAAC4C,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEF,kBAACC,EAAA,EAAD,CAAOC,YAAY,4EAAgBC,GAAG,aAAaC,SAAU,SAACC,GAAS,EAAK3C,OAAO2C,EAAMC,OAAOC,WAEjGC,KAAKZ,MAAMZ,KAAKyB,KAAI,SAAAC,GAAI,OAAG,kBAAC,EAAD,CAAMC,IAAKD,EAAKlD,UAAWF,KAAMoD,EAAKE,QAASpD,UAAWkD,EAAKlD,oB,GAnEzFqD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.510b532a.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Button, CardTitle, CardText } from 'reactstrap';\n\n\nconst Cardmsg = (props) => {\n  return (\n    <div className=\"mt-2\">\n      <Card className=\"bg-dark text-white\" body>\n        <CardTitle>{props.name}</CardTitle>\n        <CardText>{props.reqNumber}</CardText>\n        {/* <Button className=\"btn btn-info\">Go somewhere</Button> */}\n      </Card>\n    </div>\n  )\n}\n\nexport default Cardmsg","import React, { Component } from 'react'\nimport './App.css'\n\nimport { Button,InputGroup, InputGroupAddon, InputGroupText,Input } from 'reactstrap'\nimport Header from '../src/components/nav'\nimport Card from '../src/components/card'\nimport firebase from 'firebase'\nclass App extends Component {\n  constructor(props){\n                      super(props)\n                      var config = {\n                                      apiKey: \"AIzaSyDxNF3vWAXTNmNu6eifZkxTlPTJUmPQwTQ\",\n                                      authDomain: \"cscn-2567c.firebaseapp.com\",\n                                      databaseURL: \"https://cscn-2567c.firebaseio.com\",\n                                      projectId: \"cscn-2567c\",\n                                      storageBucket: \"cscn-2567c.appspot.com\",\n                                      messagingSenderId: \"677224433732\",\n                                      appId: \"1:677224433732:web:4b47e9cdb1ef8da0b4d411\",\n                                      measurementId: \"G-4JDE5RP2WR\"\n                                    }\n                        // Initialize Firebase\n                        if (!firebase.apps.length) {\n                          firebase.initializeApp(config);\n                      }\n                      this.state = {rows:[]}\n                      \n\n                    }\n  componentDidMount(){\n                      const dataArray = []\n                      let app = firebase.database().ref('job')\n                      app.on('value', snapshot => {\n                                                    var jobData = snapshot.val()\n                                                    var i = 0\n                                                    while(Object.keys(jobData)[i])\n                                                    {\n                                                      dataArray.push(Object.values(jobData)[i])\n                                                      i++\n                                                    }\n                                                    this.setState({rows:dataArray})\n                              })\n  }\n  search = (keyword)=>{\n                        console.log(keyword)\n                        var dataArray = []\n                        let app = firebase.database().ref('job')\n                        app.on('value', snapshot => {\n                          var jobData = snapshot.val()\n                          var i = 0\n                          while(Object.keys(jobData)[i])\n                          {\n                            dataArray.push(Object.values(jobData)[i])\n                            i++\n                          }\n                        \n                        })\n                        const row = dataArray\n                        const result = row.filter(row => row.reqNumber.includes(keyword))\n                        console.log(result);\n                        this.setState({rows:result})\n                      }\n  render() {\n            return (\n              <div className=\"container\">\n                <div className=\"row bg-dark text-white\">\n                  <div className=\"col-lg-12\" ><h1>THE FOLDER</h1></div>\n                </div>\n                <div className=\"row\"></div>\n                <InputGroup className=\"mt-2\">\n                  <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>Search</InputGroupText>\n                  </InputGroupAddon>\n                  <Input placeholder=\"เลขที่คำร้อง \" id=\"searchText\" onChange={(event)=>{this.search(event.target.value)}}/>\n                </InputGroup>\n                {this.state.rows.map(item=>(<Card key={item.reqNumber} name={item.jobName} reqNumber={item.reqNumber}/>))}\n              </div>\n            )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}